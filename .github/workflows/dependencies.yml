name: Dependencies

on:
  schedule:
    # Check for dependency updates weekly on Mondays
    - cron: "0 8 * * 1"
  workflow_dispatch:

jobs:
  check-dependencies:
    runs-on: ubuntu-latest
    name: Check Dependencies
    steps:
      - name: üèóÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools safety

      - name: üìä Check dependency versions
        run: |
          echo "## üì¶ Current Dependencies" >> dependency_report.md
          echo "" >> dependency_report.md
          echo "### Integration Dependencies" >> dependency_report.md
          echo "- balena-sdk>=15.0.0" >> dependency_report.md
          echo "" >> dependency_report.md
          echo "### Test Dependencies" >> dependency_report.md
          cat tests/requirements.txt | sed 's/^/- /' >> dependency_report.md
          echo "" >> dependency_report.md
          echo "### Installed Versions" >> dependency_report.md
          pip list | grep -E "(balena|pytest|aiohttp|homeassistant)" | sed 's/^/- /' >> dependency_report.md

      - name: üö® Check for critical updates
        run: |
          python -c "
          import subprocess
          import sys

          # Check if balena-sdk has updates
          try:
              result = subprocess.run(['pip', 'index', 'versions', 'balena-sdk'],
                                    capture_output=True, text=True)
              if result.returncode == 0:
                  print('‚úÖ Balena SDK version check completed')
              else:
                  print('‚ö†Ô∏è Could not check Balena SDK versions')
          except Exception as e:
              print(f'Error checking dependencies: {e}')
          "

      - name: üì§ Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: dependency_report.md

  validate-manifest:
    runs-on: ubuntu-latest
    name: Validate Manifest
    steps:
      - name: üèóÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üîç Validate manifest.json
        run: |
          python -c "
          import json
          import sys

          print('üîç Validating manifest.json...')

          with open('custom_components/balena_cloud/manifest.json') as f:
              manifest = json.load(f)

          # Required fields
          required_fields = ['domain', 'name', 'version', 'requirements', 'dependencies']
          for field in required_fields:
              if field not in manifest:
                  print(f'‚ùå Missing required field: {field}')
                  sys.exit(1)
              else:
                  print(f'‚úÖ Found {field}: {manifest[field]}')

          # Check requirements
          requirements = manifest.get('requirements', [])
          if 'balena-sdk>=15.0.0' not in requirements:
              print('‚ùå Missing balena-sdk requirement')
              sys.exit(1)
          else:
              print('‚úÖ Balena SDK requirement found')

          # Check version format
          version = manifest.get('version', '')
          if not version or len(version.split('.')) < 3:
              print(f'‚ùå Invalid version format: {version}')
              sys.exit(1)
          else:
              print(f'‚úÖ Valid version format: {version}')

          print('üéâ Manifest validation passed!')
          "

      - name: üîç Validate HACS configuration
        run: |
          python -c "
          import json
          import sys

          print('üîç Validating hacs.json...')

          with open('hacs.json') as f:
              hacs_config = json.load(f)

          # Required HACS fields
          required_fields = ['name', 'homeassistant']
          for field in required_fields:
              if field not in hacs_config:
                  print(f'‚ùå Missing required HACS field: {field}')
                  sys.exit(1)
              else:
                  print(f'‚úÖ Found {field}: {hacs_config[field]}')

          # Check optional fields
          optional_fields = ['hacs', 'render_readme', 'zip_release', 'filename', 'content_in_root']
          for field in optional_fields:
              if field in hacs_config:
                  print(f'‚úÖ Optional field {field}: {hacs_config[field]}')

          print('üéâ HACS configuration validation passed!')
          "

  prepare-release-notes:
    runs-on: ubuntu-latest
    name: Prepare Release Notes Template
    steps:
      - name: üèóÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üìù Generate release notes template
        run: |
          cat > RELEASE_TEMPLATE.md << 'EOF'
          ## üéâ Balena Cloud Integration v{VERSION}

          ### ‚ú® New Features
          - List new features here

          ### üêõ Bug Fixes
          - List bug fixes here

          ### üîß Improvements
          - List improvements here

          ### üìö Documentation
          - Updated documentation

          ### üîÑ Dependencies
          - balena-sdk>=15.0.0
          - Home Assistant 2023.1.0+

          ### üíæ Installation

          #### HACS (Recommended)
          1. Open HACS ‚Üí Integrations
          2. Search for "Balena Cloud"
          3. Download and restart Home Assistant
          4. Add integration via Settings ‚Üí Devices & Services

          #### Manual Installation
          1. Download `balena_cloud.zip`
          2. Extract to `custom_components/balena_cloud/`
          3. Restart Home Assistant
          4. Add integration via Settings ‚Üí Devices & Services

          ---
          **Note**: Please update your Balena Cloud API token if you experience authentication issues.
          EOF

      - name: üì§ Upload release template
        uses: actions/upload-artifact@v4
        with:
          name: release-template
          path: RELEASE_TEMPLATE.md
